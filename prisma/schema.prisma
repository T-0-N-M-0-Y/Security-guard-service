generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  email             String     @unique
  profileImage      String?
  coverImage        String?
  mobileNumber      Int?       @unique
  password          String
  lat               Float      @default(0.0)
  lon               Float      @default(0.0)
  expirationOtp     DateTime?
  role              UserRole   @default(USER)
  status            UserStatus @default(PENDING)
  otp               Int?
  emailVerified     Boolean    @default(false)
  isBlocked         Boolean    @default(false)
  isApproved        Boolean    @default(false)
  isCompleteProfile Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  SecurityProfile  SecurityProfile?
  bookings         Booking[]
  SecurityBookmark SecurityBookmark[]
  messages         Message[]
  reviews          Review[]

  @@map("users")
}

model SecurityProfile {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  userId              String                @unique @db.ObjectId
  phoneNumber         String
  address             String
  govtId              String
  securityCertificate String?
  dateOfBirth         DateTime
  about               String
  hourlyRate          Float
  partTimeOrFullTime  String
  avgRating           Float                 @default(0.0)
  status              SecurityProfileStatus @default(PENDING)
  approved            Boolean               @default(false)
  isVerified          Boolean               @default(false)
  stripeAccountId     String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  user             User               @relation(fields: [userId], references: [id])
  bookings         Booking[]
  reviews          Review[]
  messages         Message[]
  SecurityBookmark SecurityBookmark[]

  @@map("securityProfile")
}

model Booking {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  SecurityProfileId String        @db.ObjectId
  pickup            String
  dropoff           String
  appointmentAt     DateTime
  pickupTime        DateTime
  serviceHours      Int
  serviceEndTime    DateTime?
  totalBill         Float?
  bookingNotes      String?
  status            BookingStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  SecurityProfile SecurityProfile @relation(fields: [SecurityProfileId], references: [id])
  review          Review?         @relation(fields: [reviewId], references: [id])
  reviewId        String?         @db.ObjectId

  @@map("booking")
}

model SecurityBookmark {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  SecurityProfileId String   @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id])
  security SecurityProfile @relation(fields: [SecurityProfileId], references: [id])

  @@map("securityBookmark")
}

model Review {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId         String   @db.ObjectId
  userId            String   @db.ObjectId
  SecurityProfileId String   @db.ObjectId
  rating            Int
  comment           String?  @default("")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  SecurityProfile SecurityProfile @relation(fields: [SecurityProfileId], references: [id])
  Booking         Booking[]

  @@map("reviews")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User              User?            @relation(fields: [userId], references: [id])
  userId            String?          @db.ObjectId
  SecurityProfile   SecurityProfile? @relation(fields: [SecurityProfileId], references: [id])
  SecurityProfileId String?          @db.ObjectId

  @@map("messages")
}

enum UserRole {
  USER
  SECURITY
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

enum SecurityProfileStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ON_THE_WAY
  ARRIVED
  MARK_AS_COMPLETE
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
