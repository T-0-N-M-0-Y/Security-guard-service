generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  email             String     @unique
  profileImage      String?
  coverImage        String?
  expirationOtp     DateTime?
  otp               Int?
  password          String
  emailVerified     Boolean    @default(false)
  isBlocked         Boolean    @default(false)
  isApproved        Boolean    @default(false)
  isCompleteProfile Boolean    @default(false)
  role              UserRole   @default(USER)
  status            UserStatus @default(PENDING)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  bookings  Booking[]
  favorites GuardBookmark[]
  reviews   Review[]
  Security  Security?
  messages  Message[]

  @@map("users")
}

model Security {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @unique @db.ObjectId
  phoneNumber     String
  address         String
  govId           String
  certificate     String
  dob             DateTime
  about           String
  rating          Float          @default(0.0)
  hourlyRate      Float
  status          SecurityStatus @default(PENDING)
  approved        Boolean        @default(false)
  isVerified      Boolean        @default(false)
  stripeAccountId String?

  user          User            @relation(fields: [userId], references: [id])
  bookings      Booking[]
  reviews       Review[]
  GuardBookmark GuardBookmark[]
  messages      Message[]
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  securityId    String        @db.ObjectId
  pickup        String
  dropoff       String
  appointmentAt DateTime
  pickupTime    String
  serviceHours  Int
  ratePerHour   Int
  status        BookingStatus @default(PENDING)
  totalBill     Float
  createdAt     DateTime      @default(now())

  user     User     @relation(fields: [userId], references: [id])
  security Security @relation(fields: [securityId], references: [id])
  review   Review?  @relation(fields: [reviewId], references: [id])
  reviewId String?  @db.ObjectId
}

model GuardBookmark {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  securityId String @db.ObjectId

  user     User     @relation(fields: [userId], references: [id])
  security Security @relation(fields: [securityId], references: [id])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  securityId String   @db.ObjectId
  rating     Int
  comment    String
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  security Security  @relation(fields: [securityId], references: [id])
  Booking  Booking[]
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())

  User       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  Security   Security? @relation(fields: [securityId], references: [id])
  securityId String?   @db.ObjectId
}

enum UserRole {
  USER
  SECURITY
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

enum SecurityStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  ON_THE_WAY
  ARRIVED
  COMPLETED
  APPROVED
}
